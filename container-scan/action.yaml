name: "Security Scan Composite Action"
description: >
  GitHub Action for scanning container images for vulnerabilities using Lacework.

inputs:
  skip-checkout:
    required: false
    default: "false"
    description: Skip repository checkout in this step
  dockerhub-user:
    required: false
    default: ""
    description: DockerHub username
  dockerhub-password:
    required: false
    default: ""
    description: DockerHub password
  image-name:
    required: false
    description: Docker image name
  image-tag:
    required: true
    description: Docker image tag
  enable-docker-build:
    required: false
    default: true
    description: Enable Docker build
  lw-account-name:
    required: true
    description: Lacework account name
  lw-access-token:
    required: true
    description: Lacework access token
  github-token:
    required: true
    description: GitHub token
  build-args:
    required: false
    description: Docker build arguments

outputs:
  image-name:
    description: Name of the scanned Docker image.

runs:
  using: composite
  steps:
    - name: Checkout Repository
      if: ${{ inputs.skip-checkout != 'true' }}
      uses: actions/checkout@v4

    - name: Build Docker Image
      if: ${{ inputs.enable-docker-build }}
      uses: open-turo/actions-security/docker-build@v2
      id: docker-build
      with:
        dockerhub-user: ${{ inputs.dockerhub-user }}
        dockerhub-password: ${{ inputs.dockerhub-password }}
        image-version: ${{ inputs.image-tag }}
        build-args: ${{ inputs.build-args }}

    - name: Determine Image Name
      run: |
        if [ "${{ inputs.enable-docker-build }}" = "true" ]; then
          echo "IMAGE_NAME=${{ steps.docker-build.outputs.image-name }}" >> $GITHUB_ENV
        else
          echo "IMAGE_NAME=${{ inputs.image-name }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Scan Container Image
      uses: lacework/lw-scanner-action@v1.4.3
      with:
        LW_ACCOUNT_NAME: ${{ inputs.lw-account-name }}
        LW_ACCESS_TOKEN: ${{ inputs.lw-access-token }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        SAVE_RESULTS_IN_LACEWORK: true
        ADDITIONAL_PARAMETERS: "-j"

    - name: Check Lacework Scan Results File
      run: |
        if [ -f results.stdout ]; then
          echo "Scan results file (results.stdout) exists."
        else
          echo "Error: Scan results file (results.stdout) does not exist."
          exit 1
        fi
      shell: bash

    - name: Format Results for PR
      run: |
        echo "## Lacework Inline Scanner Results" > pr-results.md
        echo "<details><summary>Click to expand</summary>" >> pr-results.md
        echo "<pre>" >> pr-results.md
        cat results.stdout >> pr-results.md
        echo "</pre>" >> pr-results.md
        echo "</details>" >> pr-results.md
      shell: bash

    - name: Check for Previous Report Comment
      id: find-comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: "github-actions[bot]"
        body-includes: "Lacework Inline Scanner Results"

    - name: Delete previous test report comment
      if: github.event_name == 'pull_request' && steps.fc.outputs.comment-id != ''
      uses: winterjung/comment@v1
      with:
        type: delete
        comment_id: ${{ steps.fc.outputs.comment-id }}
        token: ${{ inputs.github-token }}

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: thollander/actions-comment-pull-request@v3
      with:
        file-path: pr-results.md
        mode: recreate
        comment-tag: to_recreate
        github-token: ${{ inputs.github-token }}

    - name: Cleanup Docker Image
      if: always()
      run: |
        echo "Cleaning up image: ${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}"
        docker image rm ${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}
      shell: bash
